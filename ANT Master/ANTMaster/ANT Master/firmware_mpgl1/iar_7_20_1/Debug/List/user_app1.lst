###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        01/Nov/2018  14:50:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpg_common\application\user_app1.c
#    Command line =  
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpg_common\application\user_app1.c" -D MPGL1 -D
#        MPG1 -D EIE1 --preprocess=cl
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\Debug\List\" -lC
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\Debug\List\" -o
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EiE\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\" -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\bsp\" -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\drivers\" -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\application\" -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\" -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\"
#        -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\"
#        -I
#        "C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\"
#        -On --use_c++_inline --require_prototypes -I D:\EiE\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding
#        TestMessage\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding TestMessage\firmware_mpg_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"C:\Users\10428\Desktop\HOMEWORK-ANTMaster-master\HOMEWORK-ANTMaster--\sennding TestMessage\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern u32 G_u32AntApiCurrentMessageTimeStamp;                    /* From ant_api.c */
     50          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    /* From ant_api.c */
     51          extern u8 G_au8AntApiCurrentMessageBytes[ANT_APPLICATION_MESSAGE_BYTES];  /* From ant_api.c */
     52          extern AntExtendedDataType G_sAntApiCurrentMessageExtData;                /* From ant_api.c */
     53          
     54          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     55          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     56          
     57          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     58          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     59          
     60          
     61          /***********************************************************************************************************************
     62          Global variable definitions with scope limited to this local application.
     63          Variable names shall start with "UserApp1_" and be declared as static.
     64          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     65          static fnCode_type UserApp1_StateMachine;              /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     66          static u32 UserApp1_u32Timeout;                        /* Timeout counter used across states */
   \                     UserApp1_u32Timeout:
   \   00000000                      DS8 4
     67          

   \                                 In section .bss, align 4
     68          static AntAssignChannelInfoType UserApp1_sChannelInfo; /* ANT setup parameters */
   \                     UserApp1_sChannelInfo:
   \   00000000                      DS8 20
     69          

   \                                 In section .data, align 4
     70          static u8 UserApp1_au8MessageFail[] = "\n\r***ANT channel setup failed***\n\n\r";
   \                     UserApp1_au8MessageFail:
   \   00000000   0x0A 0x0D          DC8 "\012\015***ANT channel setup failed***\012\012\015"
   \              0x2A 0x2A    
   \              0x2A 0x41    
   \              0x4E 0x54    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x75 0x70    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x2A    
   \              0x2A 0x2A    
   \              0x0A 0x0A    
   \              0x0D 0x00    
     71          
     72          /**********************************************************************************************************************
     73          Function Definitions
     74          **********************************************************************************************************************/
     75          
     76          /*--------------------------------------------------------------------------------------------------------------------*/
     77          /* Public functions                                                                                                   */
     78          /*--------------------------------------------------------------------------------------------------------------------*/
     79          
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          /* Protected functions                                                                                                */
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          
     84          /*--------------------------------------------------------------------------------------------------------------------
     85          Function: UserApp1Initialize
     86          
     87          Description:
     88          Initializes the State Machine and its variables.
     89          
     90          Requires:
     91            -
     92          
     93          Promises:
     94            - 
     95          */

   \                                 In section .text, align 2, keep-with-next
     96          void UserApp1Initialize(void)
     97          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     98            u8 au8WelcomeMessage[] = "ANT Master";
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable3
   \   00000006   0x220B             MOVS     R2,#+11
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy
     99          
    100            /* Write a weclome message on the LCD */
    101          #if EIE1
    102            /* Set a message up on the LCD. Delay is required to let the clear command send. */
    103            LCDCommand(LCD_CLEAR_CMD);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       LCDCommand
    104            for(u32 i = 0; i < 10000; i++);
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??UserApp1Initialize_0: (+1)
   \   00000014   0xF242 0x7110      MOVW     R1,#+10000
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD201             BCS.N    ??UserApp1Initialize_1
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F9             B.N      ??UserApp1Initialize_0
    105            LCDMessage(LINE1_START_ADDR, au8WelcomeMessage);
   \                     ??UserApp1Initialize_1: (+1)
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       LCDMessage
    106          #endif /* EIE1 */
    107            
    108          #if 0 // untested for MPG2
    109            
    110          #endif /* MPG2 */
    111          
    112           /* Configure ANT for this application */
    113            UserApp1_sChannelInfo.AntChannel          = ANT_CHANNEL_USERAPP;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable3_1
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    114            UserApp1_sChannelInfo.AntChannelType      = ANT_CHANNEL_TYPE_USERAPP;
   \   0000002E   0x2010             MOVS     R0,#+16
   \   00000030   0x....             LDR.N    R1,??DataTable3_1
   \   00000032   0x7048             STRB     R0,[R1, #+1]
    115            UserApp1_sChannelInfo.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable3_1
   \   00000038   0x73C8             STRB     R0,[R1, #+15]
    116            UserApp1_sChannelInfo.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x....             LDR.N    R1,??DataTable3_1
   \   0000003E   0x7408             STRB     R0,[R1, #+16]
    117           
    118            UserApp1_sChannelInfo.AntDeviceIdLo       = ANT_DEVICEID_LO_USERAPP;
   \   00000040   0x2064             MOVS     R0,#+100
   \   00000042   0x....             LDR.N    R1,??DataTable3_1
   \   00000044   0x72C8             STRB     R0,[R1, #+11]
    119            UserApp1_sChannelInfo.AntDeviceIdHi       = ANT_DEVICEID_HI_USERAPP;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR.N    R1,??DataTable3_1
   \   0000004A   0x7308             STRB     R0,[R1, #+12]
    120            UserApp1_sChannelInfo.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x....             LDR.N    R1,??DataTable3_1
   \   00000050   0x7348             STRB     R0,[R1, #+13]
    121            UserApp1_sChannelInfo.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x....             LDR.N    R1,??DataTable3_1
   \   00000056   0x7388             STRB     R0,[R1, #+14]
    122            UserApp1_sChannelInfo.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   00000058   0x2032             MOVS     R0,#+50
   \   0000005A   0x....             LDR.N    R1,??DataTable3_1
   \   0000005C   0x7448             STRB     R0,[R1, #+17]
    123            UserApp1_sChannelInfo.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x....             LDR.N    R1,??DataTable3_1
   \   00000062   0x7488             STRB     R0,[R1, #+18]
    124          
    125            UserApp1_sChannelInfo.AntNetwork = ANT_NETWORK_DEFAULT;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable3_1
   \   00000068   0x7088             STRB     R0,[R1, #+2]
    126            for(u8 i = 0; i < ANT_NETWORK_NUMBER_BYTES; i++)
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??UserApp1Initialize_2: (+1)
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2808             CMP      R0,#+8
   \   00000070   0xDA06             BGE.N    ??UserApp1Initialize_3
    127            {
    128              UserApp1_sChannelInfo.AntNetworkKey[i] = ANT_DEFAULT_NETWORK_KEY;
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x....             LDR.N    R2,??DataTable3_1
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x1882             ADDS     R2,R0,R2
   \   0000007A   0x70D1             STRB     R1,[R2, #+3]
    129            }
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xE7F5             B.N      ??UserApp1Initialize_2
    130            
    131            /* Attempt to queue the ANT channel setup */
    132            if( AntAssignChannel(&UserApp1_sChannelInfo) )
   \                     ??UserApp1Initialize_3: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable3_1
   \   00000082   0x.... 0x....      BL       AntAssignChannel
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD008             BEQ.N    ??UserApp1Initialize_4
    133            {
    134              UserApp1_u32Timeout = G_u32SystemTime1ms;
   \   0000008A   0x....             LDR.N    R0,??DataTable3_2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x....             LDR.N    R1,??DataTable3_3
   \   00000090   0x6008             STR      R0,[R1, #+0]
    135              UserApp1_StateMachine = UserApp1SM_AntChannelAssign;
   \   00000092   0x.... 0x....      ADR.W    R0,UserApp1SM_AntChannelAssign
   \   00000096   0x....             LDR.N    R1,??DataTable3_4
   \   00000098   0x6008             STR      R0,[R1, #+0]
   \   0000009A   0xE006             B.N      ??UserApp1Initialize_5
    136            }
    137            else
    138            {
    139              /* The task isn't properly initialized, so shut it down and don't run */
    140              DebugPrintf(UserApp1_au8MessageFail);
   \                     ??UserApp1Initialize_4: (+1)
   \   0000009C   0x....             LDR.N    R0,??DataTable3_5
   \   0000009E   0x.... 0x....      BL       DebugPrintf
    141              UserApp1_StateMachine = UserApp1SM_Error;
   \   000000A2   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   000000A6   0x....             LDR.N    R1,??DataTable3_4
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    142            }
    143          
    144          } /* end UserApp1Initialize() */
   \                     ??UserApp1Initialize_5: (+1)
   \   000000AA   0xBD07             POP      {R0-R2,PC}       ;; return
    145          
    146            
    147          /*----------------------------------------------------------------------------------------------------------------------
    148          Function UserApp1RunActiveState()
    149          
    150          Description:
    151          Selects and runs one iteration of the current state in the state machine.
    152          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    153          may take 1ms / n to execute.
    154          
    155          Requires:
    156            - State machine function pointer points at current state
    157          
    158          Promises:
    159            - Calls the function to pointed by the state machine function pointer
    160          */

   \                                 In section .text, align 2, keep-with-next
    161          void UserApp1RunActiveState(void)
    162          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    163            UserApp1_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable3_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    164          
    165          } /* end UserApp1RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    166          
    167          
    168          /*--------------------------------------------------------------------------------------------------------------------*/
    169          /* Private functions                                                                                                  */
    170          /*--------------------------------------------------------------------------------------------------------------------*/
    171          
    172          
    173          /**********************************************************************************************************************
    174          State Machine Function Definitions
    175          **********************************************************************************************************************/
    176          /*-------------------------------------------------------------------------------------------------------------------*/
    177          /* Wait for ANT channel assignment */

   \                                 In section .text, align 4, keep-with-next
    178          static void UserApp1SM_AntChannelAssign()
    179          {
   \                     UserApp1SM_AntChannelAssign: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    180            if( AntRadioStatusChannel(ANT_CHANNEL_USERAPP) == ANT_CONFIGURED)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       AntRadioStatusChannel
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD106             BNE.N    ??UserApp1SM_AntChannelAssign_0
    181            {
    182              /* Channel assignment is successful, so open channel and
    183              proceed to Idle state */
    184              AntOpenChannelNumber(ANT_CHANNEL_USERAPP);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       AntOpenChannelNumber
    185              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000012   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000016   0x....             LDR.N    R1,??DataTable3_4
   \   00000018   0x6008             STR      R0,[R1, #+0]
    186            }
    187            
    188            /* Watch for time out */
    189            if(IsTimeUp(&UserApp1_u32Timeout, 3000))
   \                     ??UserApp1SM_AntChannelAssign_0: (+1)
   \   0000001A   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000001E   0x....             LDR.N    R0,??DataTable3_3
   \   00000020   0x.... 0x....      BL       IsTimeUp
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD006             BEQ.N    ??UserApp1SM_AntChannelAssign_1
    190            {
    191              DebugPrintf(UserApp1_au8MessageFail);
   \   00000028   0x....             LDR.N    R0,??DataTable3_5
   \   0000002A   0x.... 0x....      BL       DebugPrintf
    192              UserApp1_StateMachine = UserApp1SM_Error;    
   \   0000002E   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   00000032   0x....             LDR.N    R1,??DataTable3_4
   \   00000034   0x6008             STR      R0,[R1, #+0]
    193            }
    194               
    195          } /* end UserApp1SM_AntChannelAssign */
   \                     ??UserApp1SM_AntChannelAssign_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          /*-------------------------------------------------------------------------------------------------------------------*/
    198          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    199          static void UserApp1SM_Idle(void)
    200          {
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    201            static u8 au8TestMessage[] = {0x5B, 0, 0, 0, 0xFF, 0, 0, 0};
    202            if( AntReadAppMessageBuffer() )
   \   00000002   0x.... 0x....      BL       AntReadAppMessageBuffer
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD03D             BEQ.N    ??UserApp1SM_Idle_0
    203            {
    204               /* New message from ANT task: check what it is */
    205              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   0000000A   0x....             LDR.N    R0,??DataTable3_6
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD039             BEQ.N    ??UserApp1SM_Idle_0
    206              {      
    207          //      if(G_au8AntApiCurrentMessageBytes[ANT_TICK_MSG_EVENT_CODE_INDEX] == EVENT_TRANSFER_TX_FAILED )
    208          //      {
    209          //        au8TestMessage[3]++;
    210          //        if(au8TestMessage[3] == 0)
    211          //        {
    212          //          au8TestMessage[2]++;
    213          //          if(au8TestMessage[2] == 0)
    214          //          {
    215          //            au8TestMessage[1]++;
    216          //          }
    217          //        }
    218          //      } 
    219              }
    220              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \   00000012   0x....             LDR.N    R0,??DataTable3_6
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xD135             BNE.N    ??UserApp1SM_Idle_0
    221              {
    222                if(G_au8AntApiCurrentMessageBytes[ANT_TICK_MSG_EVENT_CODE_INDEX] == EVENT_TRANSFER_TX_FAILED )
   \   0000001A   0x....             LDR.N    R0,??DataTable3_7
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x2806             CMP      R0,#+6
   \   00000020   0xD116             BNE.N    ??UserApp1SM_Idle_1
    223                {
    224                  au8TestMessage[3]++;
   \   00000022   0x....             LDR.N    R0,??DataTable3_8
   \   00000024   0x78C0             LDRB     R0,[R0, #+3]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable3_8
   \   0000002A   0x70C8             STRB     R0,[R1, #+3]
    225                  if(au8TestMessage[3] == 0)
   \   0000002C   0x....             LDR.N    R0,??DataTable3_8
   \   0000002E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD10D             BNE.N    ??UserApp1SM_Idle_1
    226                  {
    227                    au8TestMessage[2]++;
   \   00000034   0x....             LDR.N    R0,??DataTable3_8
   \   00000036   0x7880             LDRB     R0,[R0, #+2]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable3_8
   \   0000003C   0x7088             STRB     R0,[R1, #+2]
    228                    if(au8TestMessage[2] == 0)
   \   0000003E   0x....             LDR.N    R0,??DataTable3_8
   \   00000040   0x7880             LDRB     R0,[R0, #+2]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD104             BNE.N    ??UserApp1SM_Idle_1
    229                    {
    230                      au8TestMessage[1]++;
   \   00000046   0x....             LDR.N    R0,??DataTable3_8
   \   00000048   0x7840             LDRB     R0,[R0, #+1]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable3_8
   \   0000004E   0x7048             STRB     R0,[R1, #+1]
    231                    }
    232                  }
    233                } 
    234                
    235               /* Update and queue the new message data */
    236                au8TestMessage[7]++;
   \                     ??UserApp1SM_Idle_1: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable3_8
   \   00000052   0x79C0             LDRB     R0,[R0, #+7]
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0x....             LDR.N    R1,??DataTable3_8
   \   00000058   0x71C8             STRB     R0,[R1, #+7]
    237                if(au8TestMessage[7] == 0)
   \   0000005A   0x....             LDR.N    R0,??DataTable3_8
   \   0000005C   0x79C0             LDRB     R0,[R0, #+7]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD10D             BNE.N    ??UserApp1SM_Idle_2
    238                {
    239                  au8TestMessage[6]++;
   \   00000062   0x....             LDR.N    R0,??DataTable3_8
   \   00000064   0x7980             LDRB     R0,[R0, #+6]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x....             LDR.N    R1,??DataTable3_8
   \   0000006A   0x7188             STRB     R0,[R1, #+6]
    240                  if(au8TestMessage[6] == 0)
   \   0000006C   0x....             LDR.N    R0,??DataTable3_8
   \   0000006E   0x7980             LDRB     R0,[R0, #+6]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD104             BNE.N    ??UserApp1SM_Idle_2
    241                  {
    242                    au8TestMessage[5]++;
   \   00000074   0x....             LDR.N    R0,??DataTable3_8
   \   00000076   0x7940             LDRB     R0,[R0, #+5]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x....             LDR.N    R1,??DataTable3_8
   \   0000007C   0x7148             STRB     R0,[R1, #+5]
    243                  }
    244                }
    245                AntQueueAcknowledgedMessage(ANT_CHANNEL_USERAPP, au8TestMessage);
   \                     ??UserApp1SM_Idle_2: (+1)
   \   0000007E   0x....             LDR.N    R1,??DataTable3_8
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       AntQueueAcknowledgedMessage
    246              }
    247            } /* end AntReadData() */
    248            
    249          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_0: (+1)
   \   00000086   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??au8TestMessage:
   \   00000000   0x5B 0x00          DC8 91, 0, 0, 0, 255, 0, 0, 0
   \              0x00 0x00    
   \              0xFF 0x00    
   \              0x00 0x00    
    250          
    251          
    252          /*-------------------------------------------------------------------------------------------------------------------*/
    253          /* Handle an error (for now, do nothing) */

   \                                 In section .text, align 4, keep-with-next
    254          static void UserApp1SM_Error(void)          
    255          {
    256            
    257          } /* end UserApp1SM_Error() */
   \                     UserApp1SM_Error: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     UserApp1_sChannelInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     UserApp1_u32Timeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     UserApp1_au8MessageFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     G_au8AntApiCurrentMessageBytes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ??au8TestMessage

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x4E          DC8 "ANT Master"
   \              0x54 0x20    
   \              0x4D 0x61    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \   0000000B   0x00               DC8 0
    258          
    259          
    260          
    261          /*--------------------------------------------------------------------------------------------------------------------*/
    262          /* End of File                                                                                                        */
    263          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UserApp1Initialize
        16   -> AntAssignChannel
        16   -> DebugPrintf
        16   -> LCDCommand
        16   -> LCDMessage
        16   -> __aeabi_memcpy
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   UserApp1SM_AntChannelAssign
         8   -> AntOpenChannelNumber
         8   -> AntRadioStatusChannel
         8   -> DebugPrintf
         8   -> IsTimeUp
       0   UserApp1SM_Error
       8   UserApp1SM_Idle
         8   -> AntQueueAcknowledgedMessage
         8   -> AntReadAppMessageBuffer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      12  ?_0
       4  G_u32UserApp1Flags
     172  UserApp1Initialize
      10  UserApp1RunActiveState
      56  UserApp1SM_AntChannelAssign
       2  UserApp1SM_Error
     136  UserApp1SM_Idle
       4  UserApp1_StateMachine
      36  UserApp1_au8MessageFail
      20  UserApp1_sChannelInfo
       4  UserApp1_u32Timeout
       8  au8TestMessage

 
  32 bytes in section .bss
  44 bytes in section .data
  12 bytes in section .rodata
 412 bytes in section .text
 
 412 bytes of CODE  memory
  12 bytes of CONST memory
  76 bytes of DATA  memory

Errors: none
Warnings: 1
